version: "3.9"

services:

  # -------------------------
  # BASES DE DATOS
  # -------------------------
  mariadb:
    image: mariadb:10.11
    container_name: mariadb
    restart: always
    environment:
      # --- CORREGIDO: Usar prefijo MARIADB_ ---
      MARIADB_ROOT_PASSWORD: rootpass
      MARIADB_DATABASE: wallet_db
      MARIADB_USER: wallet_user
      MARIADB_PASSWORD: walletpass
    ports: # <-- VERIFICAR INDENTACIÓN (2 espacios)
      - "3307:3306" # <-- VERIFICAR INDENTACIÓN (4 espacios + guión + espacio)
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - wallet_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p${MARIADB_ROOT_PASSWORD}"] # <-- Healthcheck mejorado
      interval: 10s
      timeout: 5s
      retries: 10

  cassandra1:
    image: cassandra:4.1
    container_name: cassandra1
    environment:
      - CASSANDRA_CLUSTER_NAME=WalletCluster
      - CASSANDRA_SEEDS=cassandra1 # Correcto para el primer nodo
    ports:
      - "9042:9042" 
    volumes:
      - cassandra1_data:/var/lib/cassandra
    networks:
      - wallet_net
    healthcheck:
      test: ["CMD-SHELL", "nodetool status"]
      interval: 20s
      timeout: 10s
      retries: 10
  
  cassandra2:
    image: cassandra:4.1
    container_name: cassandra2
    environment:
      - CASSANDRA_CLUSTER_NAME=WalletCluster
      - CASSANDRA_SEEDS=cassandra1 # Correcto, apunta al primer nodo
    volumes:
      - cassandra2_data:/var/lib/cassandra
    networks:
      - wallet_net
    depends_on:
      - cassandra1

  cassandra3:
    image: cassandra:4.1
    container_name: cassandra3
    environment:
      - CASSANDRA_CLUSTER_NAME=WalletCluster
      - CASSANDRA_SEEDS=cassandra1 # Correcto, apunta al primer nodo
    volumes:
      - cassandra3_data:/var/lib/cassandra
    networks:
      - wallet_net
    depends_on:
      - cassandra1

  # -------------------------
  # MICROSERVICIOS
  # -------------------------
  auth_service:
    build: ./auth_service
    container_name: auth_service
    restart: always
    ports:
      - "8001:8000" 
    networks:
      - wallet_net
    depends_on:
      mariadb:
        condition: service_healthy

  balance_service:
    build: ./balance_service
    container_name: balance_service
    restart: always
    ports:
      - "8003:8000"
    networks:
      - wallet_net
    depends_on:
      mariadb:
        condition: service_healthy

  ledger_service:
    build: ./ledger_service
    container_name: ledger_service
    restart: always
    ports:
      - "8002:8000"
    networks:
      - wallet_net
    depends_on:
      cassandra1: # Podría depender del healthcheck si quisiéramos ser más estrictos
        condition: service_started 

  gateway_service:
    build: ./gateway_service
    container_name: gateway_service
    restart: always
    ports:
      - "8080:8080"
    networks:
      - wallet_net
    depends_on:
      - auth_service
      - balance_service
      - ledger_service

  mock_bankb:
    build: ./mock_bankb
    container_name: mock_bankb
    restart: always
    ports:
      - "8090:8000"
    networks:
      - wallet_net

  # -------------------------
  # AUTOMATIZACIÓN Y MONITOREO
  # -------------------------
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: always
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n_workflows:/home/node/n8n/workflows 
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin
      - N8N_HOST=0.0.0.0
      - WEBHOOK_URL=http://n8n:5678/ 
    networks:
      - wallet_net

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    restart: always
    ports:
      - "1025:1025" 
      - "8025:8025" 
    networks:
      - wallet_net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro 
      # - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - wallet_net
    depends_on: 
      - gateway_service 
      - auth_service
      - balance_service
      - ledger_service
      - mock_bankb

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      # - ./monitoring/grafana/provisioning:/etc/grafana/provisioning 
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - wallet_net
    depends_on:
      - prometheus 

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - wallet_net
    depends_on:
      - mailhog 

  watchdog:
    # --- IMPORTANTE: Necesitas un Dockerfile en ./monitoring ---
    # Ejemplo simple: FROM python:3.11-slim \n WORKDIR /app \n RUN pip install docker requests \n COPY watchdog.py . \n CMD ["python", "watchdog.py"]
    build: ./monitoring 
    container_name: watchdog
    restart: always
    environment:
      - N8N_ALERT_WEBHOOK=http://n8n:5678/webhook/recovery
      - CHECK_INTERVAL=60
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - wallet_net
    depends_on:
      - n8n
      - gateway_service
      # No necesitas depender de auth/ledger aquí, el watchdog los revisa por nombre

# -------------------------
# RED Y VOLÚMENES
# -------------------------
networks:
  wallet_net:
    driver: bridge

volumes:
  mariadb_data:
  cassandra1_data:
  cassandra2_data:
  cassandra3_data:
  n8n_data:
  grafana_data: